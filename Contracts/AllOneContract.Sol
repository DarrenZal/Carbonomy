pragma solidity ^0.5.00;

/**
* @title SafeMath
* @dev Math operations with safety checks that throw on error
*/
library SafeMath {

    /**
    * @dev Multiplies two numbers, throws on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
        if (a == 0) {
        return 0;
        }
        
        c = a * b;
        assert(c / a == b);
        return c;
    }
    
    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }
    
    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }
    
    /**
    * @dev Adds two numbers, throws on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}



interface Token {

    /// @return total amount of tokens
    function totalSupply() external view returns (uint256 supply);

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) external returns (bool success);

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) external returns (bool success);

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}


contract StandardToken is Token{
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 totSupply;
    function totalSupply() external view returns (uint256 supply){
        return totSupply;
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        //Default assumes totalSupply can't be over max (2^256 - 1).
        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
        //Replace the if with this one instead.
        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            emit Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        //same as above. Replace this line with the following if you want to protect against wrapping uints.
        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            emit Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }
    
    //function transferAndCall?
    //function transferFromAndCall?

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
}


/*
This Token Contract implements the standard token functionality (https://github.com/ethereum/EIPs/issues/20) as well as the following OPTIONAL extras intended for use by humans.

In other words. This is intended for deployment in something like a Token Factory or Mist wallet, and then used by humans.
Imagine coins, currencies, shares, voting weight, etc.
Machine-based, rapid creation of many tokens would not necessarily need these extra features or will be minted in other manners.

1) Initial Finite Supply (upon creation one specifies how much is minted).
2) In the absence of a token registry: Optional Decimal, Symbol & Name.
3) Optional approveAndCall() functionality to notify a contract if an approval() has occurred.

.*/
contract FungibleToken is StandardToken {

    /**
    * @dev allow selfDestruct if there are no balances (free up space in the blockchain!)
    * @param _destructor the address to send residual funds to
    */
    function destruct(address payable _destructor) public returns (bool){
        require(totSupply == 0);
        selfdestruct(_destructor);
    }

    /* Public variables of the token */
    /*
    NOTE:
    The following variables are OPTIONAL vanities. One does not have to include them.
    They allow one to customise the token contract & in no way influences the core functionality.
    Some wallets/interfaces might not even bother to look at this information.
    */
    string public name;                   //eg Oil, gasoline, plastic #2
    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.
    string public symbol;                 //An identifier: eg SBX
    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.
    address public owner;

    constructor(
        address _caller,
        uint256 _amount,
        string memory _tokenName,
        uint8 _decimalUnits,
        string memory _tokenSymbol
        ) public {
        owner = msg.sender;
        balances[_caller] = _amount;               // Give the creator all initial tokens
        totSupply = _amount;                        // Update total supply
        name = _tokenName;                                   // Set the name for display purposes
        decimals = _decimalUnits;                            // Amount of decimals for display purposes
        symbol = _tokenSymbol;                               // Set the symbol for display purposes
    }

    /**
    * @dev add to caller's balance
    * @param _amount how much to add
    */
    function addBalance(uint256 _amount) public returns (bool){
        balances[msg.sender] = SafeMath.add(balances[msg.sender], _amount);
        totSupply = SafeMath.add(totSupply, _amount);
    }

    /**
    * @dev allows transformation of one token to another in one transaction in combo with removeBalance()
    * @param _account address to add balance to
    * @param _amount how much to add
    */
    function addBalanceCustom(address _account, uint256 _amount) public returns (bool){
        require(msg.sender == owner);
        balances[_account] = SafeMath.add(balances[_account], _amount);
        totSupply = SafeMath.add(totSupply, _amount);
    }

    /**
    * @dev allows removal of balance
    * @param _amount how much to remove
    */
    function removeBalance(uint256 _amount) public returns (bool){
        require(SafeMath.sub(balances[msg.sender], _amount) >= 0);
        require(SafeMath.sub(totSupply, _amount) >= 0);
        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);
        totSupply = SafeMath.sub(totSupply, _amount);
    }

    /**
    * @dev allows transformation of one token to another in one transaction in combo with addBalance()
    * @param _account address to remove balance from
    * @param _amount how much to remove
    */
    function removeBalanceCustom(address _account, uint256 _amount) public returns (bool){
        require(msg.sender == owner);
        require(SafeMath.sub(balances[_account], _amount) >= 0);
        require(SafeMath.sub(totSupply, _amount) >= 0);
        balances[_account] = SafeMath.sub(balances[_account], _amount);
        totSupply = SafeMath.sub(totSupply, _amount);
    }

    /*
    * @dev Approves and then calls the receiving contract
    * @param _spender address of allowed spender
    * @param _value how much to approve
    * @param _extraData extra data as bytes
    
    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);

        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.
        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)
        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.
        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }
        return true;
    }
    */
}



//This contract can create new fungible tokens (ERC20) with addNewMaterial()
//Adding new materials is important to accomodate the different types of raw materials extracted around the world
//This contract can transform any ERC20 into another ERC20 with transformMaterial()
//transformation is important to oil and gas refining where raw material inputs are chemically transformed into new outputs
contract Materials{
    //if true then this address represents an existing material
    mapping (address => bool) exists;
    //list of material contract addresses
    address[] public materialAddresses;

    /**
    * @dev returns list of material addresses
    */
    function getMaterials() public view returns (address[] memory ){
        return materialAddresses;
    }

    /**
    * @dev allows adding a new material balance, allow duplicate name, symbol etc because address will be the unique ID
    */
    function addNewFungibleMaterial(string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public returns (address){
            FungibleToken newToken = new FungibleToken(address(this), 0, _tokenName, _decimalUnits, _tokenSymbol);
            address newTokenAddress = address(newToken);
            require(!exists[newTokenAddress]);
            exists[newTokenAddress] = true;
            materialAddresses.push(newTokenAddress);
            return newTokenAddress;
    }

    /**
    * @dev allows transforming one material to another
    */
    function transformFungibleMaterial(address _materialFrom, address _materialTo, uint256 _amountFrom, uint256 _amountTo, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public returns (bool){
        address addressMaterialTo = _materialTo;
        FungibleToken materialTo;
        if(exists[_materialFrom]){ 
            //The token being transformed exists as a Material, so we can decrease the supply using removeBalanceCustom
            FungibleToken material = FungibleToken(_materialFrom);
            require(material.balanceOf(msg.sender) >= _amountFrom);
            material.removeBalanceCustom(msg.sender, _amountFrom);
        } else { 
            //The token being transformed must be a regular ERC20 which has approved this contract to transfer _amountFrom in order to lock it up
            Token tokenFrom = Token(_materialFrom);
            require(_amountFrom <= tokenFrom.balanceOf(msg.sender));
            require(tokenFrom.allowance( msg.sender,  address(this)) >= _amountFrom);
            tokenFrom.transferFrom(msg.sender, address(this), _amountFrom);
        }
        if(addressMaterialTo == address(0)){
            addressMaterialTo = addNewFungibleMaterial(_tokenName, _decimalUnits, _tokenSymbol);
            materialTo = FungibleToken(addressMaterialTo);
            materialTo.addBalanceCustom(msg.sender, _amountTo);
        } else {
            require(exists[_materialTo] == true);
            materialTo = FungibleToken(_materialTo);
            materialTo.addBalanceCustom(msg.sender, _amountTo);
        }
        emit TransformMaterial(_materialFrom, addressMaterialTo, _amountFrom, _amountTo);
    }


    event TransformMaterial(address _materialFrom, address _materialTo, uint256 _amountFrom, uint256 _amountTo);

}
